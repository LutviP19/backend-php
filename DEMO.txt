SETUP :
-------
- Composer:
composer install

- env (copy example)
$ cp .env.example .env

- Sample Database(mysql dump):
create table users : storage/database/migrations/mysql
create sample user : storage/database/migrations/mysql/insert_user.sql

- docker compose
redis : 
$ docker compose docker-compose/redis/docker-compose.yaml
rabbitmq :
$ docker compose docker-compose/rabbitmq-python/docker-compose.yaml
mailpit :
$ docker compose docker-compose/mailpit/docker-compose.yml


APP COMMANDS :
--------------
- Run Server
$ php -S localhost:8000 -t public/

- Get app info (param: userid)
$ php bin/console app:info 1
Output:
App Name: Backend PHP
App Url: http://localhost:8000
App Environment: local
App Debug status: true
App Session driver: redis
App Database driver: mysql
App Message Broker driver: rabbitmq
App Mailer driver: smtp
App header api token [X-Api-Token]: eyJpdiI6Ik1Cd29xWDFIOE9CUW81Q08rWnZEM1E9PSIsInZhbHVlIjoid05sVmtTeUFad0tzdFgxQzdSMyt1aW5xS0hTN0pwc3NrSFE2NVQvQ3FxQT0iLCJtYWMiOiIxZGMwZGQ1NzU0YzYxMmUzMjFhMzU2N2FmYjIxM2MwZDczY2Y2YWE1MzA2OWU2NWQzMWRhOTVmYmM0YmMyNTc4IiwidGFnIjoiIn0=
User ID: 1
App header client token [X-Client-Token]: MWE0YzYxZjQ0M2NkYTc1NDVlZmY2NmY0ZDQxNDY0MjdlODIzMWZlNGY0NzM0M2U5YzZmOGFlZGY2NTA4MDcyOA==

All info of application.


- Listen Message (param: userid)
$ php bin/console app:testing 1
Output:
[*] Waiting for messages userid:1. To exit press CTRL+C


- Setup app (planned)
$ php bin/console app:setup



CURL :
------
Note: 
[REPLACE_WITH_YOUR_OWN_SETUP] depend on your own generated key (use command [Get app info] to get this values).
[REPLACE_WITH_YOUR_OWN_DATA] depend on your own data from database.

- Login 
--------
curl --location 'http://localhost:8000/auth/login' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: [REPLACE_WITH_YOUR_OWN_SETUP]' \
--data-raw '{
    "email" : "[REPLACE_WITH_YOUR_OWN_DATA]",
    "password" : "[REPLACE_WITH_YOUR_OWN_DATA]"
}'
-----
Used Response:
- token : [REPLACE_WITH_VALID_JWT]
- sessid : [REPLACE_WITH_VALID_SESION_ID]


- Logout 
---------
curl --location --request POST 'http://localhost:8000/auth/logout' \
--header 'Authorization: Bearer [REPLACE_WITH_VALID_JWT]' \
--header 'Cookie: BACKENDPHPSESSID=[REPLACE_WITH_VALID_SESION_ID]' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: [REPLACE_WITH_YOUR_OWN_SETUP]' \
--header 'X-Client-Token: [REPLACE_WITH_YOUR_OWN_SETUP]'

- Update Client token
----------------------
curl --location 'http://localhost:8000/auth/uptoken' \
--header 'Authorization: Bearer [REPLACE_WITH_VALID_JWT]' \
--header 'Cookie: BACKENDPHPSESSID=[REPLACE_WITH_VALID_SESION_ID]' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: [REPLACE_WITH_YOUR_OWN_SETUP]' \
--header 'X-Client-Token: [REPLACE_WITH_YOUR_OWN_SETUP]' \
--data-raw '{
    "email" : "[REPLACE_WITH_YOUR_OWN_DATA]",
    "password" : "[REPLACE_WITH_YOUR_OWN_DATA]"
}'

- Webhook (Display sample data)
-------------------------------
curl --location --request GET 'http://localhost:8000/webhook' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: [REPLACE_WITH_YOUR_OWN_SETUP]' \
--data-raw '{
    "email" : "admin@example.com",
    "password" : "password123",
    "credentials" : {
        "read" : true,
        "write" : true,
        "delete" : false
    }
}'

- Client profile 
-----------------
curl --location --request GET 'http://localhost:8000/client/profile' \
--header 'Authorization: Bearer [REPLACE_WITH_VALID_JWT]' \
--header 'Cookie: BACKENDPHPSESSID=[REPLACE_WITH_VALID_SESION_ID]' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: [REPLACE_WITH_YOUR_OWN_SETUP]' \
--header 'X-Client-Token: [REPLACE_WITH_YOUR_OWN_SETUP]'


Message Queue (with Encryption):
--------------------------------
- Producer
curl --location --request GET 'http://localhost:8000/extra'
Output:
[x] Sent[19-09-2025 17:27:20]: [{"id":1,"title":"Title A","contents":"The default interactive shell is now zsh."},{"id":2,"title":"Title B","contents":"To update your account to use zsh"},{"id":3,"title":"Title C","contents":"For more details, please visit"}]<br>
Sending message to RabbitMQ: eyJpdiI6IkJ5S0prWVlRV3I0aU8rU3dUQWRjK1E9PSIsInZhbHVl.........
===================================================<br>
Main output to place an order and trigger the event-driven process.<br>
Order placed: 123
Inventory updated for order: 123
Payment processed for order: 123
Email sent for order: 123

- Consummer Rabbit MQ
$ php bin/console app:testing 1
Output:
 [x] 19-09-2025 17:27:20
id: 1
title: Title A
contents: The default interactive shell is now zsh.
=====
 [x] 19-09-2025 17:27:20
event: order.placed
id: 123
=====


Events :
--------
curl --location --request GET 'http://localhost:8000/extra'
Output:
Main output to place an order and trigger the event-driven process.<br>
Order placed: 123
Inventory updated for order: 123
Payment processed for order: 123
Email sent for order: 123

$ php bin/console app:testing 1
Output:
EventListener[message.queue]: [{"id":1,"title":"Title A","contents":"The default interactive shell is now zsh."},{"id":2,"title":"Title B","contents":"To update your account to use zsh"},{"id":3,"title":"Title C","contents":"For more details, please visit"}]


Non-Blocking Process:
---------------------
$ php bin/console app:testing 1
Output:
Let's start non-blocking version: 
Parse key id: [key:id, value:1]
Parse key title: [key:title, value:Title A]
Parse key contents: [key:contents, value:The default interactive shell is now zsh.]

simulateConcurrent-output: {"id":"1 counter: 10000x","title":"Title A counter: 2000x","contents":"The default interactive shell is now zsh. counter: 15000x"}


