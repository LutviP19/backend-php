$ composer dump-autoload -o
$ cd public
$ php -S localhost:8000
$ php -S localhost:8000 -t public/

$ php bin/console list
$ php bin/console app:testing 1

curl --location --request GET 'http://localhost:8000/webhook' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: eyJpdiI6Im9Nbm5STk9FYWhhTE12SEhKT2pNanc9PSIsInZhbHVlIjoiUGRSQ0g5cCtKTEU2NGd5MDVJa3J1WDJkUTBML3I1cG94TDVxeHBOaEpOWT0iLCJtYWMiOiIwYWU1NWNlOTllZGMxZDFjYmJhZTE2MzgyMmNiNzYzNjEzYjY3Yjc0MDFlYjgxYzJiN2VjNzk1ZDIzNTNhYTNkIiwidGFnIjoiIn0=' \
--data-raw '{
    "email" : "admin@example.com",
    "password" : "password123",
    "credentials" : {
        "read" : true,
        "write" : true,
        "delete" : false
    }
}'

curl --location 'http://localhost:8000/auth/login' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: eyJpdiI6Im9Nbm5STk9FYWhhTE12SEhKT2pNanc9PSIsInZhbHVlIjoiUGRSQ0g5cCtKTEU2NGd5MDVJa3J1WDJkUTBML3I1cG94TDVxeHBOaEpOWT0iLCJtYWMiOiIwYWU1NWNlOTllZGMxZDFjYmJhZTE2MzgyMmNiNzYzNjEzYjY3Yjc0MDFlYjgxYzJiN2VjNzk1ZDIzNTNhYTNkIiwidGFnIjoiIn0=' \
--data-raw '{
    "email" : "admin2@example.com",
    "password" : "password123"
}'

curl --location --request POST 'http://localhost:8000/auth/logout' \
--header 'Authorization: Bearer eyJjdHkiOiJKV1QiLCJpbmZvIjoiQXBpIGp3dC0wMUs1OFo0UDM0WkhBREM5NzRBUEg4OVBRMyIsImFsZyI6IkhTMjU2IiwidHlwIjoiSldUIn0.eyJpc3MiOiIxMjcuMC4wLjEiLCJzdWIiOiJBY2Nlc3MgQVBJIGZvciB1c2VyOjAxSzU4WjRQMzRaSEFEQzk3NEFQSDg5UFEzIiwiYXVkIjoiaHR0cDpcL1wvbG9jYWxob3N0OjgwMDAiLCJleHAiOjE3NTgwNDAzMTcsIm5iZiI6MTc1ODAzMzExNywiaWF0IjoxNzU4MDM2NzE3LCJqdGkiOiIwMUs1OUpFV0I3UlJFVDYzMFBIRFNUMzkxTSIsInVpZCI6IjAxSzU4WjRQMzRaSEFEQzk3NEFQSDg5UFEzIn0.ZeAYEA1hd1Qsd2q4gwtGowkEYsoZ5uhy6pHPkjHszhg' \
--header 'Cookie: PHPSESSID=qbnesvud53dvbgas7prb11nje7; BACKENDPHPSESSID=vgk3f9tcjn10jr6fafetgcer9q' \
--header 'Content-Type: application/json' \
--header 'X-Api-Token: eyJpdiI6Im9Nbm5STk9FYWhhTE12SEhKT2pNanc9PSIsInZhbHVlIjoiUGRSQ0g5cCtKTEU2NGd5MDVJa3J1WDJkUTBML3I1cG94TDVxeHBOaEpOWT0iLCJtYWMiOiIwYWU1NWNlOTllZGMxZDFjYmJhZTE2MzgyMmNiNzYzNjEzYjY3Yjc0MDFlYjgxYzJiN2VjNzk1ZDIzNTNhYTNkIiwidGFnIjoiIn0=' \
--header 'X-Client-Token: NTJjYmMxNTBjNmFhODgxZDZiODVhY2ZmMzMxMWIzMjhkOGMyOWUyNjhhZWU5MzcyZjI1NDUyYjY2N2JmNGRlOQ=='

dd(gettype($this->encryptionKey));
\App\Core\Support\Log::info(gettype($val), 'TestCommand.getMessage');
\App\Core\Support\Log::debug($this->sql, 'QueryBuilder.appendSQL');

admin@example.com
password123

{
    "email" : "admin@example.com",
    "password" : "password123",
    "credentials" : {
        "read" : true,
        "write" : true,
        "delete" : false
    }
}

// __construct($rateLimitName, $maxUsages, $period, $bucketSize) 
// (new \App\Core\Security\Middleware\RateLimiterRateLimiter('webhook_request', 1, 60, 60))->setup();


// Encode Header to Base64Url String
$base64UrlHeader = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($header));

envelope
========
private const STAMP_HEADER_PREFIX = 'X-Message-Stamp-';

['body] = base64_encode()
['headers']['Content-Type'] = json | xml
['headers']['X-Message-Stamp-XXX'] = custom value


$client = new Predis\Client();

// Delete a single key
$client->del('mykey');

// Delete multiple keys
$client->del(['key1', 'key2', 'key3']);


// Using SCAN (recommended for production)
$cursor = '0';
do {
    list($cursor, $keys) = $client->scan($cursor, ['MATCH' => 'prefix:*', 'COUNT' => 100]);
    if (!empty($keys)) {
        $client->del($keys);
    }
} while ($cursor !== '0');

SET:
The SET command stores a single key-value pair, where both the key and the value are strings.
It's used for basic caching or storing individual pieces of data.
Example: SET user:1:name "Alice"
HSET:
The HSET command operates on a Redis Hash data structure. A Hash is a collection of field-value pairs stored under a single key.
It's used to represent objects or structured data, where you have multiple related attributes for a single entity.
Example: HSET user:1 name "Alice" email "alice@example.com"